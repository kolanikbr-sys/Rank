--[[
Rank - ESP Script + System Key + Advanced ESP Info + Automation Tab + Huge Tab + Viz Tab + Fun Tab + Utilidades Tab
Key obrigat√≥ria: "rankgui"
Logo customizada

Fun√ß√µes principais:
- ESP highlight vermelho (toggle)
- ESP informativo: nome, vida, dist√¢ncia, tempo (toggle)
- Teletransporte simples para jogador
- Teletransporte cont√≠nuo (loop)
- Huge Tab: ganha uma AK-47 overpower que mata qualquer player com um clique
- Viz Tab: deslizador para ajustar velocidade do player at√© 500
- Fun Tab: 20 fun√ß√µes de troll/divers√£o
- Utilidades Tab: 20 fun√ß√µes √∫teis/automatizadas
]]

local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/master/source.lua", true))()

local Window = Luna:CreateWindow({
    Name = "Rank",
    Subtitle = "ESP Avan√ßado",
    LogoID = "16408304458",
    LoadingEnabled = true,
    LoadingTitle = "Rank",
    LoadingSubtitle = "Rank exploits",
    ConfigSettings = {
        RootFolder = nil,
        ConfigFolder = "LunaESPExample"
    },
    KeySystem = true,
    KeySettings = {
        Title = "Rank Key",
        Subtitle = "Sistema de Key",
        Note = "Digite a key correta para acessar o script.",
        SaveInRoot = false,
        SaveKey = true,
        Key = {"rankgui"},
        SecondAction = {
            Enabled = false,
            Type = "Link",
            Parameter = ""
        }
    }
})

-- SERVI√áOS E VARIAVEIS GLOBAIS
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local highlights = {}
local espGui = {}
local ESPWalkSpeed = 16
local highlightsEnabled = false
local infoESPEnabled = false

local function getCharacterRoot(character)
    return character and (character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")) or nil
end

local function enableHighlightESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local character = player.Character
            if character and not highlights[player] then
                local highlight = Instance.new("Highlight")
                highlight.Adornee = character
                highlight.FillColor = Color3.new(1, 0, 0)
                highlight.OutlineColor = Color3.new(1, 0, 0)
                highlight.FillTransparency = 0.5
                highlight.OutlineTransparency = 0
                highlight.Parent = game:GetService("CoreGui")
                highlights[player] = highlight
            end
        end
    end
end

local function disableHighlightESP()
    for player, highlight in pairs(highlights) do
        if highlight then highlight:Destroy() end
    end
    highlights = {}
end

local function createBillboard(player)
    if espGui[player] then return end
    local character = player.Character
    if not character then return end
    local root = getCharacterRoot(character)
    local head = character:FindFirstChild("Head")
    if not root or not head then return end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "RankESPInfo"
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 200, 0, 70)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.Adornee = head
    billboard.Parent = game:GetService("CoreGui")
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "PlayerName"
    nameLabel.BackgroundTransparency = 1
    nameLabel.Size = UDim2.new(1, 0, 0, 20)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.TextStrokeTransparency = 0.7
    nameLabel.TextStrokeColor3 = Color3.new(0,0,0)
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.TextScaled = true
    nameLabel.Text = player.Name
    nameLabel.Parent = billboard
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Name = "PlayerHealth"
    healthLabel.BackgroundTransparency = 1
    healthLabel.Size = UDim2.new(1, 0, 0, 20)
    healthLabel.Position = UDim2.new(0, 0, 0, 20)
    healthLabel.TextColor3 = Color3.new(1, 0.3, 0.3)
    healthLabel.TextStrokeTransparency = 0.7
    healthLabel.Font = Enum.Font.SourceSans
    healthLabel.TextScaled = true
    healthLabel.Text = "Vida: --"
    healthLabel.Parent = billboard
    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Name = "PlayerDistance"
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.Size = UDim2.new(1, 0, 0, 15)
    distanceLabel.Position = UDim2.new(0, 0, 0, 40)
    distanceLabel.TextColor3 = Color3.new(0.5, 0.8, 1)
    distanceLabel.TextStrokeTransparency = 0.7
    distanceLabel.Font = Enum.Font.SourceSans
    distanceLabel.TextScaled = true
    distanceLabel.Text = "Dist√¢ncia: --"
    distanceLabel.Parent = billboard
    local timeLabel = Instance.new("TextLabel")
    timeLabel.Name = "PlayerTime"
    timeLabel.BackgroundTransparency = 1
    timeLabel.Size = UDim2.new(1, 0, 0, 15)
    timeLabel.Position = UDim2.new(0, 0, 0, 55)
    timeLabel.TextColor3 = Color3.new(1, 1, 0.4)
    timeLabel.TextStrokeTransparency = 0.7
    timeLabel.Font = Enum.Font.SourceSans
    timeLabel.TextScaled = true
    timeLabel.Text = "Tempo: --"
    timeLabel.Parent = billboard
    espGui[player] = billboard
end

local function removeBillboard(player)
    if espGui[player] then
        espGui[player]:Destroy()
        espGui[player] = nil
    end
end

local function updateESPInfo()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and infoESPEnabled and player.Character then
            local character = player.Character
            local root = getCharacterRoot(character)
            local head = character:FindFirstChild("Head")
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if root and head and humanoid then
                if not espGui[player] then
                    createBillboard(player)
                end
                local gui = espGui[player]
                if gui then
                    gui.Adornee = head
                    local health = math.floor(humanoid.Health)
                    gui.PlayerHealth.Text = string.format("Vida: %d", health)
                    local myRoot = LocalPlayer.Character and getCharacterRoot(LocalPlayer.Character)
                    if myRoot then
                        local dist = (root.Position - myRoot.Position).Magnitude
                        gui.PlayerDistance.Text = string.format("Dist√¢ncia: %d", dist)
                        local time = dist / ESPWalkSpeed
                        gui.PlayerTime.Text = string.format("Tempo: %.1fs", time)
                    else
                        gui.PlayerDistance.Text = "Dist√¢ncia: --"
                        gui.PlayerTime.Text = "Tempo: --"
                    end
                end
            else
                removeBillboard(player)
            end
        else
            removeBillboard(player)
        end
    end
end

local function onCharacterAdded(character)
    if highlightsEnabled then
        local player = Players:GetPlayerFromCharacter(character)
        if player and player ~= LocalPlayer then
            task.wait(0.5)
            enableHighlightESP()
        end
    end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(onCharacterAdded)
end

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(onCharacterAdded)
    end
end
Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(function(player)
    disableHighlightESP()
    removeBillboard(player)
end)

RunService.RenderStepped:Connect(function()
    if highlightsEnabled then
        enableHighlightESP()
    end
    if infoESPEnabled then
        updateESPInfo()
    else
        for _, player in ipairs(Players:GetPlayers()) do
            removeBillboard(player)
        end
    end
end)

-- VISUAL TAB
local VisualTab = Window:CreateTab({
    Name = "üëÅÔ∏è Visual",
    Icon = "visibility",
    ImageSource = "Material",
    ShowTitle = true
})
VisualTab:CreateSection("Visualiza√ß√£o ESP")
VisualTab:CreateParagraph({
    Title = "Como usar o ESP",
    Text = "Ative um ou ambos os ESPs abaixo para destacar ou monitorar outros jogadores no mapa. Combine para uma experi√™ncia completa!"
})
VisualTab:CreateToggle({
    Name = "ESP Highlight (Vermelho)",
    Description = "Contorno vermelho em todos jogadores.",
    CurrentValue = false,
    Callback = function(value)
        highlightsEnabled = value
        if value then enableHighlightESP() else disableHighlightESP() end
    end
}, "ESPHighlight")
VisualTab:CreateToggle({
    Name = "ESP Informativo (Nome/Vida/Dist√¢ncia/Tempo)",
    Description = "Mostra nome, vida, dist√¢ncia e tempo acima da cabe√ßa do player.",
    CurrentValue = false,
    Callback = function(value)
        infoESPEnabled = value
    end
}, "InfoESP")
VisualTab:CreateDivider()
VisualTab:CreateSection("Dicas")
VisualTab:CreateLabel({
    Text = "Ative ambos para ESP super completo!",
    Style = 2
})
VisualTab:CreateLabel({
    Text = "Se o ESP n√£o aparecer, certifique-se que seu personagem j√° est√° carregado.",
    Style = 3
})
VisualTab:CreateDivider()
VisualTab:CreateParagraph({
    Title = "Sobre",
    Text = "Desenvolvido por Rank exploits. Suporte: github.com/Nebula-Softworks/Luna-Interface-Suite"
})

-- VIZ TAB (SPEED)
local VizTab = Window:CreateTab({
    Name = "‚ö° Viz",
    Icon = "run_circle",
    ImageSource = "Material",
    ShowTitle = true
})
VizTab:CreateSection("Velocidade do Jogador")
VizTab:CreateParagraph({
    Title = "Ajuste de Velocidade",
    Text = "Use o deslizador abaixo para escolher sua velocidade de corrida. (Padr√£o: 16, M√°ximo: 500)"
})
VizTab:CreateSlider({
    Name = "Velocidade do Jogador",
    Description = "Deslize para alterar sua velocidade.",
    Range = {16, 500},
    Increment = 1,
    CurrentValue = 16,
    Callback = function(value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = value
            Luna:Notification({
                Title = "Velocidade Alterada",
                Icon = "directions_run",
                ImageSource = "Material",
                Content = "Sua velocidade agora √©: " .. tostring(value)
            })
        end
    end
}, "SpeedSlider")
VizTab:CreateDivider()
VizTab:CreateLabel({
    Text = "Use com responsabilidade! Velocidades altas podem causar kick em alguns jogos.",
    Style = 3
})

-- AUTOMATION TAB (TELEPORTES)
local AutomationTab = Window:CreateTab({
    Name = "ü§ñ Automa√ß√£o",
    Icon = "auto_awesome",
    ImageSource = "Material",
    ShowTitle = true
})
AutomationTab:CreateSection("Teletransporte para Jogador")
AutomationTab:CreateParagraph({
    Title = "Como usar",
    Text = "Digite o nome ou @ do jogador abaixo e use os bot√µes para teletransportar-se at√© ele, uma vez ou em loop."
})

local teleportInput
local teleportTargetName = nil
local teleportLoopActive = false
local teleportLoopConnection = nil

teleportInput = AutomationTab:CreateInput({
    Name = "Nome do Jogador",
    Description = "Digite o nome do jogador ou @ para teletransportar.",
    PlaceholderText = "Exemplo: kolanikbr ou @kolanikbr",
    CurrentValue = "",
    Numeric = false,
    MaxCharacters = 32,
    Enter = false,
    Callback = function(text)
        teleportTargetName = tostring(text or ""):gsub("^@", ""):lower()
    end
}, "TeleportInput")
local function findPlayerByName(name)
    if not name or name == "" then return nil end
    name = tostring(name):gsub("^@", ""):lower()
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Name:lower() == name then
            return p
        end
    end
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.DisplayName and p.DisplayName:lower() == name then
            return p
        end
    end
    return nil
end
AutomationTab:CreateButton({
    Name = "Teletransportar",
    Description = "Teletransporta voc√™ para o jogador informado acima.",
    Callback = function()
        local playerNameRaw = teleportInput.CurrentValue
        local playerName = tostring(playerNameRaw or ""):gsub("^@", ""):lower()
        teleportTargetName = playerName
        if not playerName or playerName == "" then
            Luna:Notification({
                Title = "Erro",
                Icon = "report_gmailerrorred",
                ImageSource = "Material",
                Content = "Digite o nome do jogador!"
            })
            return
        end
        local target = findPlayerByName(playerName)
        if target and target.Character then
            local myChar = LocalPlayer.Character
            local myRoot = myChar and getCharacterRoot(myChar)
            local targetRoot = getCharacterRoot(target.Character)
            if myRoot and targetRoot then
                myRoot.CFrame = targetRoot.CFrame + Vector3.new(0, 2, 0)
                Luna:Notification({
                    Title = "Teletransporte",
                    Icon = "flight_takeoff",
                    ImageSource = "Material",
                    Content = "Teletransportado para " .. target.Name
                })
            else
                Luna:Notification({
                    Title = "Erro",
                    Icon = "report_gmailerrorred",
                    ImageSource = "Material",
                    Content = "N√£o foi poss√≠vel teletransportar: personagem ou posi√ß√£o inv√°lida."
                })
            end
        else
            Luna:Notification({
                Title = "Erro",
                Icon = "report_gmailerrorred",
                ImageSource = "Material",
                Content = "Jogador n√£o encontrado ou sem personagem."
            })
        end
    end
})
AutomationTab:CreateToggle({
    Name = "Teletransporte Cont√≠nuo (Loop)",
    Description = "Teleporta para o √∫ltimo nome digitado repetidamente, enquanto ativado.",
    CurrentValue = false,
    Callback = function(enabled)
        teleportLoopActive = enabled
        if teleportLoopConnection then
            teleportLoopConnection:Disconnect()
            teleportLoopConnection = nil
        end
        if enabled then
            teleportLoopConnection = RunService.RenderStepped:Connect(function()
                local targetName = teleportTargetName or (teleportInput and teleportInput.CurrentValue) or ""
                if not targetName or targetName == "" then return end
                local target = findPlayerByName(targetName)
                if target and target.Character then
                    local myChar = LocalPlayer.Character
                    local myRoot = myChar and getCharacterRoot(myChar)
                    local targetRoot = getCharacterRoot(target.Character)
                    if myRoot and targetRoot then
                        myRoot.CFrame = targetRoot.CFrame + Vector3.new(0, 2, 0)
                    end
                end
            end)
            Luna:Notification({
                Title = "Loop Ativado",
                Icon = "loop",
                ImageSource = "Material",
                Content = "Teletransporte cont√≠nuo ativado para [" .. (teleportTargetName or "N/A") .. "]"
            })
        else
            Luna:Notification({
                Title = "Loop Desativado",
                Icon = "loop",
                ImageSource = "Material",
                Content = "Teletransporte cont√≠nuo desativado."
            })
        end
    end
}, "TeleportLoopToggle")
AutomationTab:CreateDivider()
AutomationTab:CreateLabel({
    Text = "Use o loop com cautela para evitar bugs ou travamentos.",
    Style = 3
})

-- HUGE TAB
local HugeTab = Window:CreateTab({
    Name = "üí• Huge",
    Icon = "bolt",
    ImageSource = "Material",
    ShowTitle = true
})
HugeTab:CreateSection("Arma Especial")
HugeTab:CreateParagraph({
    Title = "AK-47 Overpower",
    Text = "Clique no bot√£o para receber uma AK-47 overpower que elimina qualquer jogador com um clique."
})
HugeTab:CreateButton({
    Name = "Receber AK-47 Overpower",
    Description = "Clique para receber uma AK-47 no seu invent√°rio. Atire para eliminar qualquer jogador facilmente.",
    Callback = function()
        local backpack = LocalPlayer:FindFirstChild("Backpack")
        if not backpack then
            Luna:Notification({
                Title = "Erro",
                Icon = "report_gmailerrorred",
                ImageSource = "Material",
                Content = "Backpack n√£o encontrado."
            })
            return
        end
        if backpack:FindFirstChild("AK-47 (Huge)") then
            Luna:Notification({
                Title = "Aviso",
                Icon = "warning",
                ImageSource = "Material",
                Content = "Voc√™ j√° possui a AK-47!"
            })
            return
        end
        local tool = Instance.new("Tool")
        tool.Name = "AK-47 (Huge)"
        tool.RequiresHandle = false
        tool.CanBeDropped = true
        local shootSound = Instance.new("Sound")
        shootSound.SoundId = "rbxassetid://138087017"
        shootSound.Volume = 1
        shootSound.Name = "ShootSound"
        shootSound.Parent = tool
        tool.Activated:Connect(function()
            local mouse = LocalPlayer:GetMouse()
            shootSound:Play()
            local origin = workspace.CurrentCamera.CFrame.Position
            local direction = (mouse.Hit.p - origin).Unit * 500
            local params = RaycastParams.new()
            params.IgnoreWater = true
            params.FilterDescendantsInstances = {LocalPlayer.Character}
            local result = workspace:Raycast(origin, direction, params)
            if result and result.Instance then
                local hitPart = result.Instance
                local char = hitPart:FindFirstAncestorOfClass("Model")
                if char and char ~= LocalPlayer.Character then
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        humanoid.Health = 0
                        Luna:Notification({
                            Title = "AK-47 (Huge)",
                            Icon = "bolt",
                            ImageSource = "Material",
                            Content = "Jogador eliminado: " .. (char.Name or "?")
                        })
                    end
                end
            end
        end)
        tool.Parent = backpack
        Luna:Notification({
            Title = "AK-47 Recebida!",
            Icon = "military_tech",
            ImageSource = "Material",
            Content = "Voc√™ agora possui uma AK-47 Overpower no seu invent√°rio!"
        })
    end
})
HugeTab:CreateDivider()
HugeTab:CreateLabel({
    Text = "Use a arma com responsabilidade! Apenas para fins de divers√£o/testes.",
    Style = 3
})

-- ==== FUN TAB (20 fun√ß√µes divertidas, trollagens e efeitos) ====
local FunTab = Window:CreateTab({
    Name = "üéâ Fun",
    Icon = "celebration",
    ImageSource = "Material",
    ShowTitle = true
})
FunTab:CreateSection("Divers√£o e Trollagens")
FunTab:CreateParagraph({
    Title = "Fun√ß√µes para brincar, trollar e impressionar seus amigos!"
})
FunTab:CreateButton({Name="Girar", Description="Gira seu personagem rapidamente.", Callback=function()
    local root = getCharacterRoot(LocalPlayer.Character)
    if root then for i=1,30 do root.CFrame = root.CFrame * CFrame.Angles(0,math.pi/4,0) wait() end end
end})
FunTab:CreateButton({Name="Explos√£o Visual", Description="Cria efeito de explos√£o fake em voc√™.", Callback=functi
-- Highlight vermelho toggle em todos os players
local redHighlightEnabled = false

function toggleRedHighlight(state)
   redHighlightEnabled = state
   for _,plr in pairs(game.Players:GetPlayers()) do
      if plr ~= game.Players.LocalPlayer and plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") then
         local char = plr.Character
         if char:FindFirstChild("RedHighlight") then
            char.RedHighlight:Destroy()
         end
         if state then
            local highlight = Instance.new("Highlight")
            highlight.Name = "RedHighlight"
            highlight.FillColor = Color3.fromRGB(255, 0, 0)
            highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Parent = char
         end
      end
   end
   Rayfield:Notify({
      Title = "rank",
      Content = state and "Highlight vermelho ativado em todos os players!" or "Highlight vermelho removido dos players.",
      Duration = 3,
      Image = 0,
   })
end

VisualTab:CreateToggle({
   Name = "Highlight Vermelho (Toggle)",
   CurrentValue = false,
   SectionParent = Section,
   Callback = function(Value)
      toggleRedHighlight(Value)
   end
})

-- Atualizar highlight em novos players
game.Players.PlayerAdded:Connect(function(plr)
   plr.CharacterAdded:Connect(function()
      if redHighlightEnabled then
         task.wait(1)
         if plr ~= game.Players.LocalPlayer and plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") then
            local char = plr.Character
            if not char:FindFirstChild("RedHighlight") then
               local highlight = Instance.new("Highlight")
               highlight.Name = "RedHighlight"
               highlight.FillColor = Color3.fromRGB(255, 0, 0)
               highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
               highlight.FillTransparency = 0.5
               highlight.OutlineTransparency = 0
               highlight.Parent = char
            end
         end
      end
   end)
end)

-- Remover highlight de quem sair
game.Players.PlayerRemoving:Connect(function(plr)
   if plr.Character and plr.Character:FindFirstChild("RedHighlight") then
      plr.Character.RedHighlight:Destroy()
   end
end)

-- ESP Toggle
local espEnabled = false
local espDrawings = {}

function createESP(plr)
   if plr == game.Players.LocalPlayer then return end
   if espDrawings[plr] then return end

   local BillboardGui = Instance.new("BillboardGui")
   BillboardGui.Name = "ESP_Billboard"
   BillboardGui.Adornee = nil
   BillboardGui.Size = UDim2.new(0, 200, 0, 60)
   BillboardGui.StudsOffset = Vector3.new(0, 3, 0)
   BillboardGui.AlwaysOnTop = true

   local TextLabel = Instance.new("TextLabel", BillboardGui)
   TextLabel.Size = UDim2.new(1, 0, 1, 0)
   TextLabel.BackgroundTransparency = 1
   TextLabel.TextColor3 = Color3.fromRGB(0,255,0)
   TextLabel.TextStrokeTransparency = 0.5
   TextLabel.Font = Enum.Font.SourceSansBold
   TextLabel.TextSize = 16
   TextLabel.Text = ""

   espDrawings[plr] = {
      BillboardGui = BillboardGui,
      TextLabel = TextLabel
   }

   local function update()
      if not espDrawings[plr] then return end
      if plr.Character and plr.Character:FindFirstChild("Head") and plr.Character:FindFirstChildOfClass("Humanoid") then
         BillboardGui.Adornee = plr.Character.Head
         local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
         local playerPos = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character.HumanoidRootPart.Position or Vector3.new()
         local charPos = plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character.HumanoidRootPart.Position or Vector3.new()
         local dist = (playerPos - charPos).magnitude
         TextLabel.Text = string.format(
            "%s\nVida: %d\nDist√¢ncia: %.1f",
            plr.DisplayName or plr.Name,
            math.floor(humanoid.Health),
            dist
         )
         BillboardGui.Parent = game.CoreGui
      else
         BillboardGui.Parent = nil
      end
   end

   espDrawings[plr].Connection = game:GetService("RunService").RenderStepped:Connect(update)
end

function removeESP(plr)
   if espDrawings[plr] then
      if espDrawings[plr].Connection then
         espDrawings[plr].Connection:Disconnect()
      end
      if espDrawings[plr].BillboardGui then
         espDrawings[plr].BillboardGui:Destroy()
      end
      espDrawings[plr] = nil
   end
end

function toggleESP(state)
   espEnabled = state
   if state then
      for _,plr in pairs(game.Players:GetPlayers()) do
         createESP(plr)
      end
      Rayfield:Notify({
         Title = "rank",
         Content = "ESP ativado! Mostrando informa√ß√µes dos jogadores.",
         Duration = 3,
         Image = 0,
      })
   else
      for _,esp in pairs(espDrawings) do
         if esp.Connection then esp.Connection:Disconnect() end
         if esp.BillboardGui then esp.BillboardGui:Destroy() end
      end
      espDrawings = {}
      Rayfield:Notify({
         Title = "rank",
         Content = "ESP desativado!",
         Duration = 3,
         Image = 0,
      })
   end
end

VisualTab:CreateToggle({
   Name = "ESP (Nome, Vida, Dist√¢ncia)",
   CurrentValue = false,
   SectionParent = Section,
   Callback = function(Value)
      toggleESP(Value)
   end
})

-- Atualizar ESP ao entrar/sair jogador
game.Players.PlayerAdded:Connect(function(plr)
   if espEnabled then createESP(plr) end
end)
game.Players.PlayerRemoving:Connect(function(plr)
   removeESP(plr)
end)

-- Vari√°veis para teletransporte
local teleportLoopEnabled = false
local teleportLoopPlayerName = ""
local teleportLoopConnection

-- Teletransporte para outro jogador por nome (bot√£o √∫nico)
VisualTab:CreateInput({
   Name = "Teletransportar at√© player",
   SectionParent = Section,
   PlaceholderText = "Digite o nome do player",
   RemoveTextAfterFocusLost = false,
   Callback = function(playerName)
      local localChar = game.Players.LocalPlayer.Character
      if not localChar or not localChar:FindFirstChild("HumanoidRootPart") then
         Rayfield:Notify({
            Title = "rank",
            Content = "Seu personagem ainda n√£o est√° pronto!",
            Duration = 3,
            Image = 0,
         })
         return
      end
      local found = false
      for _,plr in pairs(game.Players:GetPlayers()) do
         if plr ~= game.Players.LocalPlayer and (string.lower(plr.Name) == string.lower(playerName) or string.lower(plr.DisplayName or "") == string.lower(playerName)) then
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
               localChar.HumanoidRootPart.CFrame = plr.Character.HumanoidRootPart.CFrame
               found = true
               Rayfield:Notify({
                  Title = "rank",
                  Content = "Teletransportado para "..(plr.DisplayName or plr.Name).."!",
                  Duration = 3,
                  Image = 0,
               })
               break
            end
         end
      end
      if not found then
         Rayfield:Notify({
            Title = "rank",
            Content = "Player n√£o encontrado ou sem personagem!",
            Duration = 3,
            Image = 0,
         })
      end
   end
})

-- Toggle de loop de teletransporte
VisualTab:CreateToggle({
   Name = "Loop Teletransporte para player",
   CurrentValue = false,
   SectionParent = Section,
   Callback = function(Value)
      teleportLoopEnabled = Value
      if teleportLoopConnection then
         teleportLoopConnection:Disconnect()
         teleportLoopConnection = nil
      end
      if teleportLoopEnabled then
         Rayfield:Notify({
            Title = "rank",
            Content = "Digite o nome do player na caixa acima para iniciar o loop.",
            Duration = 3,
            Image = 0,
         })
         -- Loop come√ßa ao definir o nome na caixa acima
         teleportLoopConnection = game:GetService("RunService").Heartbeat:Connect(function()
            local playerName = teleportLoopPlayerName
            if not playerName or playerName == "" then return end
            local localChar = game.Players.LocalPlayer.Character
            if localChar and localChar:FindFirstChild("HumanoidRootPart") then
               for _,plr in pairs(game.Players:GetPlayers()) do
                  if plr ~= game.Players.LocalPlayer and (string.lower(plr.Name) == string.lower(playerName) or string.lower(plr.DisplayName or "") == string.lower(playerName)) then
                     if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                        localChar.HumanoidRootPart.CFrame = plr.Character.HumanoidRootPart.CFrame
                     end
                  end
               end
            end
         end)
      else
         Rayfield:Notify({
            Title = "rank",
            Content = "Loop de teletransporte desativado.",
            Duration = 3,
            Image = 0,
         })
      end
   end
})

-- Capturar sempre o √∫ltimo valor digitado na caixa de input
VisualTab:CreateInput({
   Name = "Nome do player para Loop",
   SectionParent = Section,
   PlaceholderText = "Digite o nome do player para loop",
   RemoveTextAfterFocusLost = false,
   Callback = function(playerName)
      teleportLoopPlayerName = playerName
   end
})
